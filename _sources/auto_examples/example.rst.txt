
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_example.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_example.py:


Oddball Tones Example
=====================
Estimate NCRFs for standard and oddball tones.

For this tutorial, we use the auditory Brainstorm tutorial dataset :cite:`Brainstorm` that is available as a part of the Brainstorm software.

.. contents:: Contents
   :local:

.. note::
   Downloading the dataset requires answering an interactive prompt (see
   :func:`mne.datasets.brainstorm.bst_auditory.data_path`).

.. GENERATED FROM PYTHON SOURCE LINES 15-26

.. code-block:: Python

    # Authors: Proloy Das <proloy@umd.edu>
    #          Christian Brodbeck <brodbecc@mcmaster.ca>
    #
    # sphinx_gallery_thumbnail_number = 3

    import numpy as np
    import pandas as pd
    import eelbrain
    import mne
    from ncrf import fit_ncrf








.. GENERATED FROM PYTHON SOURCE LINES 27-31

Preprocessing
-------------
Preprocess MEG Data: low pass filtering, power line attenuation, downsampling, etc.
We broadly follow `this mne-python tutorial <https://mne.tools/stable/auto_tutorials/io/60_ctf_bst_auditory.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 31-110

.. code-block:: Python


    data_path = mne.datasets.brainstorm.bst_auditory.data_path()
    raw_fname = data_path / 'MEG' / 'bst_auditory' / 'S01_AEF_20131218_01.ds'
    raw = mne.io.read_raw_ctf(raw_fname, preload=False)
    n_times_run1 = raw.n_times

    # We mark a set of bad channels that seem noisier than others. 
    raw.info['bads'] = ['MLO52-4408', 'MRT51-4408', 'MLO42-4408', 'MLO43-4408']

    annotations_df = pd.DataFrame()
    offset = n_times_run1
    for idx in [1]:
        csv_fname = data_path / 'MEG' / 'bst_auditory' / f'events_bad_0{idx}.csv'
        df = pd.read_csv(csv_fname, header=None, names=['onset', 'duration', 'id', 'label'])
        print('Events from run {0}:'.format(idx))
        print(df)

        df['onset'] += offset * (idx - 1)
        annotations_df = pd.concat([annotations_df, df], axis=0)

    # Conversion from samples to times:
    onsets = annotations_df['onset'].values / raw.info['sfreq']
    durations = annotations_df['duration'].values / raw.info['sfreq']
    descriptions = annotations_df['label'].values

    annotations = mne.Annotations(onsets, durations, descriptions)
    raw.set_annotations(annotations)
    del onsets, durations, descriptions


    # events are the presentation times of the audio stimuli: UPPT001
    event_fname = data_path / 'MEG' / 'bst_auditory' / 'S01_AEF_20131218_01-eve.fif'
    events = mne.find_events(raw, stim_channel='UPPT001')
    # The event timing is adjusted by comparing the trigger times on detected sound onsets on channel UADC001-4408.
    sound_data = raw[raw.ch_names.index('UADC001-4408')][0][0]
    onsets = np.where(np.abs(sound_data) > 2. * np.std(sound_data))[0]
    min_diff = int(0.5 * raw.info['sfreq'])
    diffs = np.concatenate([[min_diff + 1], np.diff(onsets)])
    onsets = onsets[diffs > min_diff]
    assert len(onsets) == len(events)
    diffs = 1000. * (events[:, 0] - onsets) / raw.info['sfreq']
    print('Trigger delay removed (μ ± σ): %0.1f ± %0.1f ms'
          % (np.mean(diffs), np.std(diffs)))

    # events times are rescaled according to new sampling freq, 100 Hz
    events[:, 0] = np.int64(onsets * 100 / raw.info['sfreq'])
    mne.write_events(event_fname, events, overwrite=True)

    del sound_data, diffs

    ## set EOG channel
    raw.set_eeg_reference('average', projection=True)
    # raw_AEF.plot_psd(tmax=60., average=False)
    raw.load_data()
    raw.notch_filter(np.arange(60, 181, 60), fir_design='firwin')

    # band pass filtering 1-8 Hz
    raw.filter(1.0, 8.0, fir_design='firwin')

    # resample to 100 Hz
    raw.resample(100, npad="auto")

    ### LOAD RELEVANT VARIABLES AS eelbrain.NDVar
    # load as epochs for plot only
    ds = eelbrain.load.fiff.events(raw=raw, proj=True, stim_channel='UPPT001', events=event_fname)
    epochs = eelbrain.load.fiff.epochs(ds, tmin=-0.1, tmax=0.5, baseline=(None, 0))
    eelbrain.plot.Butterfly(epochs)

    # pick MEG channels
    picks = mne.pick_types(raw.info, meg=True, eeg=False, stim=False, eog=False,
                           ref_meg=False, exclude='bads')

    # Read as a single chunk of data
    y, t = raw.get_data(picks, return_times=True)
    sensor_dim = eelbrain.load.fiff.sensor_dim(raw.info, picks=picks)
    time = eelbrain.UTS.from_int(0, t.size - 1, raw.info['sfreq'])
    meg = eelbrain.NDVar(y, dims=(sensor_dim, time))
    print(meg)




.. image-sg:: /auto_examples/images/sphx_glr_example_001.png
   :alt: example
   :srcset: /auto_examples/images/sphx_glr_example_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    License
    -------
    This tutorial dataset (EEG and MRI data) remains a property of the MEG Lab,
    McConnell Brain Imaging Center, Montreal Neurological Institute,
    McGill University, Canada. Its use and transfer outside the Brainstorm
    tutorial, e.g. for research purposes, is prohibited without written consent
    from the MEG Lab.

    If you reference this dataset in your publications, please:

        1) acknowledge its authors: Elizabeth Bock, Esther Florin, Francois Tadel
           and Sylvain Baillet, and
        2) cite Brainstorm as indicated on the website:
           http://neuroimage.usc.edu/brainstorm

    For questions, please contact Francois Tadel (francois.tadel@mcgill.ca).
    Agree (y/[n])? Downloading file 'bst_auditory.tar.gz' from 'https://osf.io/5t9n8/download?version=1' to '/home/runner/mne_data'.
      0%|                                              | 0.00/1.64G [00:00<?, ?B/s]      0%|▏                                    | 6.29M/1.64G [00:00<00:31, 51.0MB/s]      1%|▎                                    | 13.3M/1.64G [00:00<00:26, 61.4MB/s]      1%|▌                                    | 22.4M/1.64G [00:00<00:21, 74.3MB/s]      2%|▋                                    | 30.0M/1.64G [00:00<00:25, 63.2MB/s]      2%|▉                                    | 38.9M/1.64G [00:00<00:22, 71.3MB/s]      3%|█                                    | 48.1M/1.64G [00:00<00:20, 77.6MB/s]      3%|█▎                                   | 57.1M/1.64G [00:00<00:19, 81.6MB/s]      4%|█▍                                   | 66.2M/1.64G [00:00<00:18, 84.3MB/s]      5%|█▋                                   | 75.2M/1.64G [00:00<00:18, 86.3MB/s]      5%|█▉                                   | 84.4M/1.64G [00:01<00:17, 87.8MB/s]      6%|██                                   | 93.3M/1.64G [00:01<00:17, 88.3MB/s]      6%|██▍                                   | 102M/1.64G [00:01<00:17, 89.1MB/s]      7%|██▌                                   | 111M/1.64G [00:01<00:17, 89.0MB/s]      7%|██▊                                   | 120M/1.64G [00:01<00:17, 86.5MB/s]      8%|██▉                                   | 129M/1.64G [00:01<00:17, 86.2MB/s]      8%|███▏                                  | 138M/1.64G [00:01<00:17, 87.7MB/s]      9%|███▍                                  | 147M/1.64G [00:01<00:16, 88.6MB/s]     10%|███▋                                  | 156M/1.64G [00:01<00:16, 87.5MB/s]     10%|███▊                                  | 165M/1.64G [00:01<00:16, 88.4MB/s]     11%|████                                  | 174M/1.64G [00:02<00:16, 89.1MB/s]     11%|████▎                                 | 183M/1.64G [00:02<00:16, 89.6MB/s]     12%|████▍                                 | 192M/1.64G [00:02<00:16, 88.3MB/s]     12%|████▋                                 | 201M/1.64G [00:02<00:16, 89.0MB/s]     13%|████▉                                 | 210M/1.64G [00:02<00:16, 88.9MB/s]     13%|█████                                 | 219M/1.64G [00:02<00:15, 88.7MB/s]     14%|█████▎                                | 228M/1.64G [00:02<00:15, 88.4MB/s]     14%|█████▌                                | 237M/1.64G [00:02<00:15, 88.5MB/s]     15%|█████▋                                | 246M/1.64G [00:02<00:16, 84.0MB/s]     16%|█████▉                                | 255M/1.64G [00:03<00:16, 85.3MB/s]     16%|██████                                | 264M/1.64G [00:03<00:15, 86.7MB/s]     17%|██████▎                               | 272M/1.64G [00:03<00:15, 87.5MB/s]     17%|██████▌                               | 281M/1.64G [00:03<00:15, 87.9MB/s]     18%|██████▋                               | 290M/1.64G [00:03<00:15, 85.0MB/s]     18%|██████▉                               | 299M/1.64G [00:03<00:15, 86.7MB/s]     19%|███████▏                              | 308M/1.64G [00:03<00:15, 88.2MB/s]     19%|███████▍                              | 318M/1.64G [00:03<00:14, 89.5MB/s]     20%|███████▌                              | 327M/1.64G [00:03<00:14, 89.7MB/s]     21%|███████▊                              | 336M/1.64G [00:03<00:14, 90.3MB/s]     21%|████████                              | 345M/1.64G [00:04<00:14, 88.7MB/s]     22%|████████▏                             | 354M/1.64G [00:04<00:14, 89.6MB/s]     22%|████████▍                             | 363M/1.64G [00:04<00:14, 89.4MB/s]     23%|████████▋                             | 372M/1.64G [00:04<00:14, 89.6MB/s]     23%|████████▊                             | 382M/1.64G [00:04<00:13, 91.3MB/s]     24%|█████████                             | 391M/1.64G [00:04<00:13, 89.1MB/s]     24%|█████████▎                            | 400M/1.64G [00:04<00:13, 89.7MB/s]     25%|█████████▌                            | 409M/1.64G [00:04<00:13, 90.5MB/s]     26%|█████████▋                            | 419M/1.64G [00:04<00:13, 92.0MB/s]     26%|█████████▉                            | 428M/1.64G [00:04<00:13, 92.0MB/s]     27%|██████████▏                           | 437M/1.64G [00:05<00:12, 92.4MB/s]     27%|██████████▍                           | 447M/1.64G [00:05<00:12, 93.8MB/s]     28%|██████████▌                           | 456M/1.64G [00:05<00:16, 73.7MB/s]     28%|██████████▊                           | 464M/1.64G [00:05<00:16, 71.8MB/s]     29%|██████████▉                           | 472M/1.64G [00:05<00:15, 73.6MB/s]     29%|███████████▏                          | 481M/1.64G [00:05<00:14, 78.4MB/s]     30%|███████████▍                          | 490M/1.64G [00:05<00:14, 80.9MB/s]     31%|███████████▌                          | 499M/1.64G [00:05<00:13, 83.9MB/s]     31%|███████████▊                          | 508M/1.64G [00:05<00:13, 86.3MB/s]     32%|████████████                          | 518M/1.64G [00:06<00:12, 87.7MB/s]     32%|████████████▏                         | 527M/1.64G [00:06<00:12, 89.0MB/s]     33%|████████████▍                         | 536M/1.64G [00:06<00:12, 89.9MB/s]     33%|████████████▋                         | 545M/1.64G [00:06<00:11, 91.0MB/s]     34%|████████████▉                         | 555M/1.64G [00:06<00:11, 91.5MB/s]     34%|█████████████                         | 564M/1.64G [00:06<00:11, 91.7MB/s]     35%|█████████████▎                        | 573M/1.64G [00:06<00:11, 91.8MB/s]     36%|█████████████▌                        | 582M/1.64G [00:06<00:11, 91.8MB/s]     36%|█████████████▋                        | 591M/1.64G [00:06<00:11, 91.7MB/s]     37%|█████████████▉                        | 601M/1.64G [00:06<00:11, 91.8MB/s]     37%|██████████████▏                       | 610M/1.64G [00:07<00:11, 91.5MB/s]     38%|██████████████▍                       | 619M/1.64G [00:07<00:11, 92.1MB/s]     38%|██████████████▌                       | 628M/1.64G [00:07<00:11, 91.3MB/s]     39%|██████████████▊                       | 638M/1.64G [00:07<00:10, 92.2MB/s]     40%|███████████████                       | 647M/1.64G [00:07<00:12, 82.1MB/s]     40%|███████████████▏                      | 656M/1.64G [00:07<00:11, 83.5MB/s]     41%|███████████████▍                      | 665M/1.64G [00:07<00:11, 85.5MB/s]     41%|███████████████▋                      | 674M/1.64G [00:07<00:11, 87.3MB/s]     42%|███████████████▊                      | 683M/1.64G [00:07<00:10, 88.4MB/s]     42%|████████████████                      | 692M/1.64G [00:07<00:10, 89.6MB/s]     43%|████████████████▎                     | 702M/1.64G [00:08<00:10, 90.4MB/s]     43%|████████████████▌                     | 711M/1.64G [00:08<00:10, 91.1MB/s]     44%|████████████████▋                     | 720M/1.64G [00:08<00:10, 90.8MB/s]     45%|████████████████▉                     | 729M/1.64G [00:08<00:10, 90.4MB/s]     45%|█████████████████▏                    | 738M/1.64G [00:08<00:09, 90.5MB/s]     46%|█████████████████▎                    | 747M/1.64G [00:08<00:09, 91.0MB/s]     46%|█████████████████▌                    | 756M/1.64G [00:08<00:10, 85.0MB/s]     47%|█████████████████▊                    | 765M/1.64G [00:08<00:11, 78.6MB/s]     47%|█████████████████▉                    | 773M/1.64G [00:08<00:11, 73.0MB/s]     48%|██████████████████▏                   | 782M/1.64G [00:09<00:11, 76.2MB/s]     48%|██████████████████▎                   | 790M/1.64G [00:09<00:10, 79.4MB/s]     49%|██████████████████▌                   | 799M/1.64G [00:09<00:10, 79.3MB/s]     49%|██████████████████▋                   | 807M/1.64G [00:09<00:10, 77.8MB/s]     50%|██████████████████▉                   | 815M/1.64G [00:09<00:10, 76.8MB/s]     50%|███████████████████                   | 822M/1.64G [00:09<00:10, 74.7MB/s]     51%|███████████████████▎                  | 832M/1.64G [00:09<00:10, 79.6MB/s]     51%|███████████████████▌                  | 841M/1.64G [00:09<00:09, 83.3MB/s]     52%|███████████████████▋                  | 850M/1.64G [00:09<00:09, 85.0MB/s]     53%|███████████████████▉                  | 859M/1.64G [00:10<00:08, 86.5MB/s]     53%|████████████████████▏                 | 868M/1.64G [00:10<00:08, 88.3MB/s]     54%|████████████████████▍                 | 877M/1.64G [00:10<00:08, 88.5MB/s]     54%|████████████████████▌                 | 886M/1.64G [00:10<00:08, 89.7MB/s]     55%|████████████████████▊                 | 896M/1.64G [00:10<00:08, 91.4MB/s]     55%|█████████████████████                 | 905M/1.64G [00:10<00:07, 91.6MB/s]     56%|█████████████████████▏                | 914M/1.64G [00:10<00:07, 91.7MB/s]     56%|█████████████████████▍                | 924M/1.64G [00:10<00:07, 92.4MB/s]     57%|█████████████████████▋                | 933M/1.64G [00:10<00:07, 92.7MB/s]     58%|█████████████████████▉                | 942M/1.64G [00:10<00:07, 93.2MB/s]     58%|██████████████████████                | 952M/1.64G [00:11<00:07, 93.5MB/s]     59%|██████████████████████▎               | 961M/1.64G [00:11<00:07, 93.6MB/s]     59%|██████████████████████▌               | 971M/1.64G [00:11<00:07, 94.5MB/s]     60%|██████████████████████▊               | 980M/1.64G [00:11<00:06, 94.4MB/s]     61%|██████████████████████▉               | 990M/1.64G [00:11<00:06, 92.6MB/s]     61%|███████████████████████▏              | 999M/1.64G [00:11<00:06, 92.1MB/s]     62%|██████████████████████▊              | 1.01G/1.64G [00:11<00:06, 92.7MB/s]     62%|███████████████████████              | 1.02G/1.64G [00:11<00:06, 93.1MB/s]     63%|███████████████████████▏             | 1.03G/1.64G [00:11<00:06, 92.8MB/s]     63%|███████████████████████▍             | 1.04G/1.64G [00:11<00:06, 93.2MB/s]     64%|███████████████████████▋             | 1.05G/1.64G [00:12<00:06, 93.3MB/s]     65%|███████████████████████▊             | 1.06G/1.64G [00:12<00:06, 92.7MB/s]     65%|████████████████████████             | 1.06G/1.64G [00:12<00:06, 92.6MB/s]     66%|████████████████████████▎            | 1.07G/1.64G [00:12<00:06, 92.4MB/s]     66%|████████████████████████▌            | 1.08G/1.64G [00:12<00:05, 92.1MB/s]     67%|████████████████████████▋            | 1.09G/1.64G [00:12<00:05, 91.9MB/s]     67%|████████████████████████▉            | 1.10G/1.64G [00:12<00:05, 92.9MB/s]     68%|█████████████████████████▏           | 1.11G/1.64G [00:12<00:05, 92.1MB/s]     68%|█████████████████████████▎           | 1.12G/1.64G [00:12<00:05, 92.2MB/s]     69%|█████████████████████████▌           | 1.13G/1.64G [00:12<00:05, 92.3MB/s]     70%|█████████████████████████▊           | 1.14G/1.64G [00:13<00:05, 92.5MB/s]     70%|█████████████████████████▉           | 1.15G/1.64G [00:13<00:05, 92.7MB/s]     71%|██████████████████████████▏          | 1.16G/1.64G [00:13<00:05, 92.5MB/s]     71%|██████████████████████████▍          | 1.17G/1.64G [00:13<00:05, 92.3MB/s]     72%|██████████████████████████▌          | 1.18G/1.64G [00:13<00:04, 92.2MB/s]     72%|██████████████████████████▊          | 1.19G/1.64G [00:13<00:04, 92.0MB/s]     73%|███████████████████████████          | 1.19G/1.64G [00:13<00:04, 91.7MB/s]     74%|███████████████████████████▏         | 1.20G/1.64G [00:13<00:04, 91.3MB/s]     74%|███████████████████████████▍         | 1.21G/1.64G [00:13<00:04, 91.6MB/s]     75%|███████████████████████████▋         | 1.22G/1.64G [00:13<00:04, 92.1MB/s]     75%|███████████████████████████▊         | 1.23G/1.64G [00:14<00:04, 92.2MB/s]     76%|████████████████████████████         | 1.24G/1.64G [00:14<00:04, 91.6MB/s]     76%|████████████████████████████▎        | 1.25G/1.64G [00:14<00:04, 91.6MB/s]     77%|████████████████████████████▍        | 1.26G/1.64G [00:14<00:04, 91.4MB/s]     78%|████████████████████████████▋        | 1.27G/1.64G [00:14<00:04, 91.8MB/s]     78%|████████████████████████████▉        | 1.28G/1.64G [00:14<00:03, 93.1MB/s]     79%|█████████████████████████████        | 1.29G/1.64G [00:15<00:07, 44.0MB/s]     79%|█████████████████████████████▎       | 1.29G/1.64G [00:15<00:07, 42.7MB/s]     80%|█████████████████████████████▍       | 1.30G/1.64G [00:15<00:07, 46.2MB/s]     80%|█████████████████████████████▌       | 1.31G/1.64G [00:15<00:06, 49.3MB/s]     80%|█████████████████████████████▋       | 1.31G/1.64G [00:15<00:05, 55.9MB/s]     81%|█████████████████████████████▉       | 1.32G/1.64G [00:15<00:05, 60.6MB/s]     81%|██████████████████████████████       | 1.33G/1.64G [00:15<00:04, 65.7MB/s]     82%|██████████████████████████████▎      | 1.34G/1.64G [00:15<00:05, 51.1MB/s]     82%|██████████████████████████████▍      | 1.35G/1.64G [00:16<00:04, 58.3MB/s]     83%|██████████████████████████████▌      | 1.35G/1.64G [00:16<00:07, 40.1MB/s]     83%|██████████████████████████████▊      | 1.36G/1.64G [00:16<00:06, 45.1MB/s]     84%|██████████████████████████████▉      | 1.37G/1.64G [00:16<00:05, 51.3MB/s]     84%|███████████████████████████████      | 1.37G/1.64G [00:16<00:05, 52.4MB/s]     84%|███████████████████████████████▏     | 1.38G/1.64G [00:16<00:04, 56.6MB/s]     85%|███████████████████████████████▍     | 1.39G/1.64G [00:16<00:03, 63.6MB/s]     85%|███████████████████████████████▌     | 1.40G/1.64G [00:16<00:03, 70.7MB/s]     86%|███████████████████████████████▊     | 1.41G/1.64G [00:17<00:03, 75.6MB/s]     87%|████████████████████████████████     | 1.42G/1.64G [00:17<00:02, 78.4MB/s]     87%|████████████████████████████████▏    | 1.42G/1.64G [00:17<00:02, 81.4MB/s]     88%|████████████████████████████████▍    | 1.43G/1.64G [00:17<00:02, 84.1MB/s]     88%|████████████████████████████████▋    | 1.44G/1.64G [00:17<00:02, 86.2MB/s]     89%|████████████████████████████████▊    | 1.45G/1.64G [00:17<00:02, 83.5MB/s]     89%|█████████████████████████████████    | 1.46G/1.64G [00:17<00:02, 84.9MB/s]     90%|█████████████████████████████████▏   | 1.47G/1.64G [00:17<00:01, 86.3MB/s]     90%|█████████████████████████████████▍   | 1.48G/1.64G [00:17<00:01, 87.3MB/s]     91%|█████████████████████████████████▋   | 1.49G/1.64G [00:17<00:01, 87.9MB/s]     91%|█████████████████████████████████▊   | 1.50G/1.64G [00:18<00:01, 81.1MB/s]     92%|██████████████████████████████████   | 1.50G/1.64G [00:18<00:01, 80.0MB/s]     92%|██████████████████████████████████▏  | 1.51G/1.64G [00:18<00:01, 75.0MB/s]     93%|██████████████████████████████████▍  | 1.52G/1.64G [00:18<00:01, 77.6MB/s]     93%|██████████████████████████████████▌  | 1.53G/1.64G [00:18<00:01, 78.5MB/s]     94%|██████████████████████████████████▊  | 1.54G/1.64G [00:18<00:01, 79.9MB/s]     94%|██████████████████████████████████▉  | 1.55G/1.64G [00:18<00:01, 80.9MB/s]     95%|███████████████████████████████████▏ | 1.55G/1.64G [00:18<00:00, 83.2MB/s]     96%|███████████████████████████████████▎ | 1.56G/1.64G [00:18<00:00, 84.9MB/s]     96%|███████████████████████████████████▌ | 1.57G/1.64G [00:19<00:00, 86.5MB/s]     97%|███████████████████████████████████▊ | 1.58G/1.64G [00:19<00:00, 87.5MB/s]     97%|███████████████████████████████████▉ | 1.59G/1.64G [00:19<00:00, 88.6MB/s]     98%|████████████████████████████████████▏| 1.60G/1.64G [00:19<00:00, 88.7MB/s]     98%|████████████████████████████████████▎| 1.61G/1.64G [00:19<00:00, 85.8MB/s]     99%|████████████████████████████████████▌| 1.62G/1.64G [00:19<00:00, 87.6MB/s]     99%|████████████████████████████████████▊| 1.63G/1.64G [00:19<00:00, 88.9MB/s]      0%|                                              | 0.00/1.64G [00:00<?, ?B/s]    100%|█████████████████████████████████████| 1.64G/1.64G [00:00<00:00, 7.83TB/s]
    Untarring contents of '/home/runner/mne_data/bst_auditory.tar.gz' to '/home/runner/mne_data/MNE-brainstorm-data'
    Events from run 1:
         onset  duration  id label
    0     7625      2776   1   BAD
    1   142459       892   1   BAD
    2   216954       460   1   BAD
    3   345135      5816   1   BAD
    4   357687      1053   1   BAD
    5   409101      3736   1   BAD
    6   461110       179   1   BAD
    7   479866       426   1   BAD
    8   764914     11500   1   BAD
    9   798174      6589   1   BAD
    10  846880      5383   1   BAD
    11  858863      5136   1   BAD
    Trigger delay removed (μ ± σ): -13.9 ± 0.3 ms
    /home/runner/mne_data/MNE-brainstorm-data/bst_auditory/MEG/bst_auditory/S01_AEF_20131218_01.ds/S01_AEF_20131218_01.meg4: MNE generated only 233 Epochs for 240 events. The raw file might end before the end of the last epoch.
    <NDVar: 270 sensor, 36000 time>




.. GENERATED FROM PYTHON SOURCE LINES 111-118

Continuous stimulus variable construction
-----------------------------------------
After loading and processing the raw data, we will construct the predictor variable for this particular experiment (by putting an impulse at every event time-point). Note that, the predictor variable and meg response should be of same length. 

In case of repetitive trials (where you will have a :class:`eelbrain.Case` dimension), supply one predictor variable for each trial. Different predictor variables for a single trial can be nested (see :func:`ncrf.fit_ncrf`).

In this example, we use two different predictor variables for a single trial

.. GENERATED FROM PYTHON SOURCE LINES 118-133

.. code-block:: Python


    # For the common response, we put impulses at the presentation times of both the audio stimuli (i.e., all beeps).
    stim1 = np.zeros(len(time))
    stim1[events[:, 0]] = 1.

    # To distinguish between standard and deviant beeps, we assign 1 and -1 impulses respectively.
    stim2 = stim1.copy()
    stim2[events[np.where(events[:, 2] == 2), 0]] = -1.
    stim1 = eelbrain.NDVar(stim1, time)
    stim2 = eelbrain.NDVar(stim2, time)

    # Visualize the stimulus
    # p = eelbrain.plot.LineStack(eelbrain.combine([stim1, stim2]), w=10, h=2.5, legend=False)
    p = eelbrain.plot.UTS([stim1, stim2], color='black', stem=True, frame='none', w=10, h=2.5, legend=False)




.. image-sg:: /auto_examples/images/sphx_glr_example_002.png
   :alt: example
   :srcset: /auto_examples/images/sphx_glr_example_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 134-138

Noise covariance estimation
---------------------------
Here we estimate the noise covariance from empty room data.
Instead, you can also use pre-stimulus recordings to compute noise covariance.

.. GENERATED FROM PYTHON SOURCE LINES 138-153

.. code-block:: Python


    noise_path = data_path / 'MEG' / 'bst_auditory' / 'S01_Noise_20131218_01.ds'
    raw_empty_room = mne.io.read_raw_ctf(noise_path, preload=True)

    # Apply the same pre-processing steps to empty room data
    raw_empty_room.notch_filter(np.arange(60, 181, 60), fir_design='firwin')

    raw_empty_room.filter(1.0, 8.0, fir_design='firwin')

    raw_empty_room.resample(100, npad="auto")

    # Compute the noise covariance matrix
    noise_cov = mne.compute_raw_covariance(raw_empty_room, tmin=0, tmax=None, method='shrunk', rank=None)









.. GENERATED FROM PYTHON SOURCE LINES 154-160

Forward model (aka lead-field matrix)
-------------------------------------
Now is the time for forward modeling.
'ico-4' should be sufficient resolution if working with surface source space.
You can choose to work with free or constrained lead fields.
:func`ncrf.fit_ncrf` will choose the appropriate regularizer by looking at the provided lead-field matrix.

.. GENERATED FROM PYTHON SOURCE LINES 160-186

.. code-block:: Python


    # The paths to FreeSurfer reconstructions
    subjects_dir = data_path / 'subjects'
    subject = 'bst_auditory'

    # mne.viz.plot_bem(subject=subject, subjects_dir=subjects_dir,
    #                  brain_surfaces='white', orientation='coronal')

    # The transformation file obtained by coregistration
    trans = data_path / 'MEG' / 'bst_auditory' / 'bst_auditory-trans.fif'

    # Here we look at the head only.
    # mne.viz.plot_alignment(raw.info, trans, subject=subject, dig=True,
    #                        meg=['helmet', 'sensors'], subjects_dir=subjects_dir,
    #                        surfaces='head')

    srcfile = subjects_dir / 'bst_auditory' / 'bem' / 'bst_auditory-ico-4-src.fif'
    if srcfile.is_file():
        src = mne.read_source_spaces(srcfile)
    else:
        src = mne.setup_source_space(subject, spacing='ico4',
                                     subjects_dir=subjects_dir, add_dist=False)
        mne.add_source_space_distances(src)
        mne.write_source_spaces(srcfile, src, overwrite=True)  # needed for smoothing
    src





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <SourceSpaces: [<surface (lh), n_vertices=163080, n_used=2562>, <surface (rh), n_vertices=163816, n_used=2562>] MRI (surface RAS) coords, subject 'bst_auditory', ~34.5 MiB>



.. GENERATED FROM PYTHON SOURCE LINES 187-188

Compute the forward solution:

.. GENERATED FROM PYTHON SOURCE LINES 188-205

.. code-block:: Python

    fwdfile = subjects_dir / 'bst_auditory' / 'bem' / 'bst_auditory-ico-4-fwd.fif'
    if fwdfile.is_file():
        fwd = mne.read_forward_solution(fwdfile)
    else:
        conductivity = (0.3,)  # for single layer
        # conductivity = (0.3, 0.006, 0.3)  # for three layers
        model = mne.make_bem_model(subject=subject, ico=4,
                                   conductivity=conductivity,
                                   subjects_dir=subjects_dir)
        bem = mne.make_bem_solution(model)

        fwd = mne.make_forward_solution(raw.info, trans=trans, src=src, bem=bem,
                                        meg=True, eeg=False, mindist=5.0, n_jobs=2)
        mne.write_forward_solution(fwdfile, fwd)

    fwd





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.
    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    1.5s finished
    [Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.
    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    1.0s finished
    [Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.
    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    1.0s finished
    [Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.
    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    0.9s finished
    [Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.
    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    0.9s finished
    [Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.
    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    0.9s finished
    [Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.
    [Parallel(n_jobs=2)]: Done   2 out of   2 | elapsed:    0.6s finished


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        // must be `var` (not `const`) because this can get embedded multiple times on a page
    var toggleVisibility = (className) => {

        const elements = document.querySelectorAll(`.${className}`);

        elements.forEach(element => {
            if (element.classList.contains("mne-repr-section-header")) {
                return  // Don't collapse the section header row
            }
            element.classList.toggle("mne-repr-collapsed");
        });

        // trigger caret to rotate
        var sel = `.mne-repr-section-header.${className} > th.mne-repr-section-toggle > button`;
        const button = document.querySelector(sel);
        button.classList.toggle("collapsed");

        // adjust tooltip
        sel = `tr.mne-repr-section-header.${className}`;
        const secHeadRow = document.querySelector(sel);
        secHeadRow.classList.toggle("collapsed");
        secHeadRow.title = secHeadRow.title === "Hide section" ? "Show section" : "Hide section";
    }
    </script>

    <style type="text/css">
        /*
    Styles in this section apply both to the sphinx-built website docs and to notebooks
    rendered in an IDE or in Jupyter. In our web docs, styles here are complemented by
    doc/_static/styles.css and other CSS files (e.g. from the sphinx theme, sphinx-gallery,
    or bootstrap). In IDEs/Jupyter, those style files are unavailable, so only the rules in
    this file apply (plus whatever default styling the IDE applies).
    */
    .mne-repr-table {
        display: inline;  /* prevent using full container width */
    }
    .mne-repr-table tr.mne-repr-section-header > th {
        padding-top: 1rem;
        text-align: left;
        vertical-align: middle;
    }
    .mne-repr-section-toggle > button {
        all: unset;
        display: block;
        height: 1rem;
        width: 1rem;
    }
    .mne-repr-section-toggle > button > svg {
        height: 60%;
    }

    /* transition (rotation) effects on the collapser button */
    .mne-repr-section-toggle > button.collapsed > svg {
        transition: 0.1s ease-out;
        transform: rotate(-90deg);
    }
    .mne-repr-section-toggle > button:not(.collapsed) > svg {
        transition: 0.1s ease-out;
        transform: rotate(0deg);
    }

    /* hide collapsed table rows */
    .mne-repr-collapsed {
        display: none;
    }


    @layer {
        /*
        Selectors in a `@layer` will always be lower-precedence than selectors outside the
        layer. So even though e.g. `div.output_html` is present in the sphinx-rendered
        website docs, the styles here won't take effect there as long as some other rule
        somewhere in the page's CSS targets the same element.

        In IDEs or Jupyter notebooks, though, the CSS files from the sphinx theme,
        sphinx-gallery, and bootstrap are unavailable, so these styles will apply.

        Notes:

        - the selector `.accordion-body` is for MNE Reports
        - the selector `.output_html` is for VSCode's notebook interface
        - the selector `.jp-RenderedHTML` is for Jupyter notebook
        - variables starting with `--theme-` are VSCode-specific.
        - variables starting with `--jp-` are Jupyter styles, *some of which* are also
          available in VSCode. Here we try the `--theme-` variable first, then fall back to
          the `--jp-` ones.
        */
        .mne-repr-table {
            --mne-toggle-color: var(--theme-foreground, var(--jp-ui-font-color1));
            --mne-button-bg-color: var(--theme-button-background, var(--jp-info-color0, var(--jp-content-link-color)));
            --mne-button-fg-color: var(--theme-button-foreground, var(--jp-ui-inverse-font-color0, var(--jp-editor-background)));
            --mne-button-hover-bg-color: var(--theme-button-hover-background, var(--jp-info-color1));
            --mne-button-radius: var(--jp-border-radius, 0.25rem);
        }
        /* chevron position/alignment; in VSCode it looks ok without adjusting */
        .accordion-body .mne-repr-section-toggle > button,
        .jp-RenderedHTML .mne-repr-section-toggle > button {
            padding: 0 0 45% 25% !important;
        }
        /* chevron color; MNE Report doesn't have light/dark mode */
        div.output_html .mne-repr-section-toggle > button > svg > path,
        .jp-RenderedHTML .mne-repr-section-toggle > button > svg > path {
            fill: var(--mne-toggle-color);
        }
        .accordion-body .mne-ch-names-btn,
        div.output_html .mne-ch-names-btn,
        .jp-RenderedHTML .mne-ch-names-btn {
            -webkit-border-radius: var(--mne-button-radius);
            -moz-border-radius: var(--mne-button-radius);
            border-radius: var(--mne-button-radius);
            border: none;
            background-image: none;
            background-color: var(--mne-button-bg-color);
            color: var(--mne-button-fg-color);
            font-size: inherit;
            min-width: 1.5rem;
            padding: 0.25rem;
            text-align: center;
            text-decoration: none;
        }
        .accordion-body .mne-ch-names-btn:hover,
        div.output_html .mne.ch-names-btn:hover,
        .jp-RenderedHTML .mne-ch-names-btn:hover {
            background-color: var(--mne-button-hover-bg-color);
            text-decoration: underline;
        }
        .accordion-body .mne-ch-names-btn:focus-visible,
        div.output_html .mne-ch-names-btn:focus-visible,
        .jp-RenderedHTML .mne-ch-names-btn:focus-visible {
            outline: 0.1875rem solid var(--mne-button-bg-color) !important;
            outline-offset: 0.1875rem !important;
        }
    }
    </style>









    <table class="table mne-repr-table">
        <tr class="mne-repr-section-header forward-7eb72434-c854-458e-b0b2-70dbfd32757d"
         title="Hide section" 
        onclick="toggleVisibility('forward-7eb72434-c854-458e-b0b2-70dbfd32757d')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Forward</strong>
        </th>
    </tr>
    
        
    <tr class="repr-element forward-7eb72434-c854-458e-b0b2-70dbfd32757d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Magnetometers</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good Magnetometers:\n\nMLC11-4408, MLC12-4408, MLC13-4408, MLC14-4408, MLC15-4408, MLC16-4408, MLC17-4408, MLC21-4408, MLC22-4408, MLC23-4408, MLC24-4408, MLC25-4408, MLC31-4408, MLC32-4408, MLC41-4408, MLC42-4408, MLC51-4408, MLC52-4408, MLC53-4408, MLC54-4408, MLC55-4408, MLC61-4408, MLC62-4408, MLC63-4408, MLF11-4408, MLF12-4408, MLF13-4408, MLF14-4408, MLF21-4408, MLF22-4408, MLF23-4408, MLF24-4408, MLF25-4408, MLF31-4408, MLF32-4408, MLF33-4408, MLF34-4408, MLF35-4408, MLF41-4408, MLF42-4408, MLF43-4408, MLF44-4408, MLF45-4408, MLF46-4408, MLF51-4408, MLF52-4408, MLF53-4408, MLF54-4408, MLF55-4408, MLF56-4408, MLF61-4408, MLF62-4408, MLF63-4408, MLF64-4408, MLF65-4408, MLF66-4408, MLF67-4408, MLO11-4408, MLO12-4408, MLO13-4408, MLO14-4408, MLO21-4408, MLO22-4408, MLO23-4408, MLO24-4408, MLO31-4408, MLO32-4408, MLO33-4408, MLO34-4408, MLO41-4408, MLO44-4408, MLO51-4408, MLO53-4408, MLP11-4408, MLP12-4408, MLP21-4408, MLP22-4408, MLP23-4408, MLP31-4408, MLP32-4408, MLP33-4408, MLP34-4408, MLP35-4408, MLP41-4408, MLP42-4408, MLP43-4408, MLP44-4408, MLP45-4408, MLP51-4408, MLP52-4408, MLP53-4408, MLP54-4408, MLP55-4408, MLP56-4408, MLP57-4408, MLT11-4408, MLT12-4408, MLT13-4408, MLT14-4408, MLT15-4408, MLT16-4408, MLT21-4408, MLT22-4408, MLT23-4408, MLT24-4408, MLT25-4408, MLT26-4408, MLT27-4408, MLT31-4408, MLT32-4408, MLT33-4408, MLT34-4408, MLT35-4408, MLT36-4408, MLT37-4408, MLT41-4408, MLT42-4408, MLT43-4408, MLT44-4408, MLT45-4408, MLT46-4408, MLT47-4408, MLT51-4408, MLT52-4408, MLT53-4408, MLT54-4408, MLT55-4408, MLT56-4408, MLT57-4408, MRC11-4408, MRC12-4408, MRC13-4408, MRC14-4408, MRC15-4408, MRC16-4408, MRC17-4408, MRC21-4408, MRC22-4408, MRC23-4408, MRC24-4408, MRC25-4408, MRC31-4408, MRC32-4408, MRC41-4408, MRC42-4408, MRC51-4408, MRC52-4408, MRC53-4408, MRC54-4408, MRC55-4408, MRC61-4408, MRC62-4408, MRC63-4408, MRF11-4408, MRF12-4408, MRF13-4408, MRF14-4408, MRF21-4408, MRF22-4408, MRF23-4408, MRF24-4408, MRF25-4408, MRF31-4408, MRF32-4408, MRF33-4408, MRF34-4408, MRF35-4408, MRF41-4408, MRF42-4408, MRF43-4408, MRF44-4408, MRF45-4408, MRF46-4408, MRF51-4408, MRF52-4408, MRF53-4408, MRF54-4408, MRF55-4408, MRF56-4408, MRF61-4408, MRF62-4408, MRF63-4408, MRF64-4408, MRF65-4408, MRF66-4408, MRF67-4408, MRO11-4408, MRO12-4408, MRO13-4408, MRO14-4408, MRO21-4408, MRO22-4408, MRO23-4408, MRO24-4408, MRO31-4408, MRO32-4408, MRO33-4408, MRO34-4408, MRO41-4408, MRO42-4408, MRO43-4408, MRO44-4408, MRO51-4408, MRO52-4408, MRO53-4408, MRP11-4408, MRP12-4408, MRP21-4408, MRP22-4408, MRP23-4408, MRP31-4408, MRP32-4408, MRP33-4408, MRP34-4408, MRP35-4408, MRP41-4408, MRP42-4408, MRP43-4408, MRP44-4408, MRP45-4408, MRP51-4408, MRP52-4408, MRP53-4408, MRP54-4408, MRP55-4408, MRP56-4408, MRP57-4408, MRT11-4408, MRT12-4408, MRT13-4408, MRT14-4408, MRT15-4408, MRT16-4408, MRT21-4408, MRT22-4408, MRT23-4408, MRT24-4408, MRT25-4408, MRT26-4408, MRT31-4408, MRT32-4408, MRT33-4408, MRT34-4408, MRT35-4408, MRT36-4408, MRT37-4408, MRT41-4408, MRT42-4408, MRT43-4408, MRT44-4408, MRT45-4408, MRT46-4408, MRT47-4408, MRT52-4408, MRT53-4408, MRT54-4408, MRT55-4408, MRT56-4408, MRT57-4408, MZC01-4408, MZC02-4408, MZC03-4408, MZC04-4408, MZF01-4408, MZF02-4408, MZF03-4408, MZO01-4408, MZO02-4408, MZO03-4408, MZP01-4408')" title="(Click to open in popup)&#13;&#13;MLC11-4408, MLC12-4408, MLC13-4408, MLC14-4408, MLC15-4408, MLC16-4408, MLC17-4408, MLC21-4408, MLC22-4408, MLC23-4408, MLC24-4408, MLC25-4408, MLC31-4408, MLC32-4408, MLC41-4408, MLC42-4408, MLC51-4408, MLC52-4408, MLC53-4408, MLC54-4408, MLC55-4408, MLC61-4408, MLC62-4408, MLC63-4408, MLF11-4408, MLF12-4408, MLF13-4408, MLF14-4408, MLF21-4408, MLF22-4408, MLF23-4408, MLF24-4408, MLF25-4408, MLF31-4408, MLF32-4408, MLF33-4408, MLF34-4408, MLF35-4408, MLF41-4408, MLF42-4408, MLF43-4408, MLF44-4408, MLF45-4408, MLF46-4408, MLF51-4408, MLF52-4408, MLF53-4408, MLF54-4408, MLF55-4408, MLF56-4408, MLF61-4408, MLF62-4408, MLF63-4408, MLF64-4408, MLF65-4408, MLF66-4408, MLF67-4408, MLO11-4408, MLO12-4408, MLO13-4408, MLO14-4408, MLO21-4408, MLO22-4408, MLO23-4408, MLO24-4408, MLO31-4408, MLO32-4408, MLO33-4408, MLO34-4408, MLO41-4408, MLO44-4408, MLO51-4408, MLO53-4408, MLP11-4408, MLP12-4408, MLP21-4408, MLP22-4408, MLP23-4408, MLP31-4408, MLP32-4408, MLP33-4408, MLP34-4408, MLP35-4408, MLP41-4408, MLP42-4408, MLP43-4408, MLP44-4408, MLP45-4408, MLP51-4408, MLP52-4408, MLP53-4408, MLP54-4408, MLP55-4408, MLP56-4408, MLP57-4408, MLT11-4408, MLT12-4408, MLT13-4408, MLT14-4408, MLT15-4408, MLT16-4408, MLT21-4408, MLT22-4408, MLT23-4408, MLT24-4408, MLT25-4408, MLT26-4408, MLT27-4408, MLT31-4408, MLT32-4408, MLT33-4408, MLT34-4408, MLT35-4408, MLT36-4408, MLT37-4408, MLT41-4408, MLT42-4408, MLT43-4408, MLT44-4408, MLT45-4408, MLT46-4408, MLT47-4408, MLT51-4408, MLT52-4408, MLT53-4408, MLT54-4408, MLT55-4408, MLT56-4408, MLT57-4408, MRC11-4408, MRC12-4408, MRC13-4408, MRC14-4408, MRC15-4408, MRC16-4408, MRC17-4408, MRC21-4408, MRC22-4408, MRC23-4408, MRC24-4408, MRC25-4408, MRC31-4408, MRC32-4408, MRC41-4408, MRC42-4408, MRC51-4408, MRC52-4408, MRC53-4408, MRC54-4408, MRC55-4408, MRC61-4408, MRC62-4408, MRC63-4408, MRF11-4408, MRF12-4408, MRF13-4408, MRF14-4408, MRF21-4408, MRF22-4408, MRF23-4408, MRF24-4408, MRF25-4408, MRF31-4408, MRF32-4408, MRF33-4408, MRF34-4408, MRF35-4408, MRF41-4408, MRF42-4408, MRF43-4408, MRF44-4408, MRF45-4408, MRF46-4408, MRF51-4408, MRF52-4408, MRF53-4408, MRF54-4408, MRF55-4408, MRF56-4408, MRF61-4408, MRF62-4408, MRF63-4408, MRF64-4408, MRF65-4408, MRF66-4408, MRF67-4408, MRO11-4408, MRO12-4408, MRO13-4408, MRO14-4408, MRO21-4408, MRO22-4408, MRO23-4408, MRO24-4408, MRO31-4408, MRO32-4408, MRO33-4408, MRO34-4408, MRO41-4408, MRO42-4408, MRO43-4408, MRO44-4408, MRO51-4408, MRO52-4408, MRO53-4408, MRP11-4408, MRP12-4408, MRP21-4408, MRP22-4408, MRP23-4408, MRP31-4408, MRP32-4408, MRP33-4408, MRP34-4408, MRP35-4408, MRP41-4408, MRP42-4408, MRP43-4408, MRP44-4408, MRP45-4408, MRP51-4408, MRP52-4408, MRP53-4408, MRP54-4408, MRP55-4408, MRP56-4408, MRP57-4408, MRT11-4408, MRT12-4408, MRT13-4408, MRT14-4408, MRT15-4408, MRT16-4408, MRT21-4408, MRT22-4408, MRT23-4408, MRT24-4408, MRT25-4408, MRT26-4408, MRT31-4408, MRT32-4408, MRT33-4408, MRT34-4408, MRT35-4408, MRT36-4408, MRT37-4408, MRT41-4408, MRT42-4408, MRT43-4408, MRT44-4408, MRT45-4408, MRT46-4408, MRT47-4408, MRT52-4408, MRT53-4408, MRT54-4408, MRT55-4408, MRT56-4408, MRT57-4408, MZC01-4408, MZC02-4408, MZC03-4408, MZC04-4408, MZF01-4408, MZF02-4408, MZF03-4408, MZO01-4408, MZO02-4408, MZO03-4408, MZP01-4408">
                270
            </button>

        
        
            and <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Bad Magnetometers:\n\nMLO42-4408, MLO43-4408, MLO52-4408, MRT51-4408')" title="(Click to open in popup)&#13;&#13;MLO42-4408, MLO43-4408, MLO52-4408, MRT51-4408">
                4 bad
            </button>
        
        </td>
    </tr>
    

        <tr class="repr-element forward-7eb72434-c854-458e-b0b2-70dbfd32757d ">
            <td class="mne-repr-section-toggle"></td>
            <td>Source space</td>
            <td>Surface with 5107 vertices</td>
        </tr>
        <tr class="repr-element forward-7eb72434-c854-458e-b0b2-70dbfd32757d ">
            <td class="mne-repr-section-toggle"></td>
            <td>Source orientation</td>
            <td>Free</td>
        </tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 206-207

Extract the fixed orientation lead field matrix:

.. GENERATED FROM PYTHON SOURCE LINES 207-214

.. code-block:: Python

    fwd_fixed = mne.convert_forward_solution(
        fwd, surf_ori=True, force_fixed=True, use_cps=True)

    # leadfield matrix
    lf = eelbrain.load.fiff.forward_operator(fwd_fixed, src='ico-4', subjects_dir=subjects_dir)









.. GENERATED FROM PYTHON SOURCE LINES 215-231

NCRF estimation
---------------
Now that we have all the required data to estimate NCRFs.

.. note::
   This example uses simplified settings to speed up estimation:

   1) For this example, we use a fixed regularization parameter (``mu``).
   For a real experiment, the optimal ``mu`` would be determined by
   cross-validation (set ``mu='auto'``, which is the default).
   The optimal ``mu`` will then be stored in ``model.mu``
   (this is how the ``mu`` used here was determined).

   2) The example forces the estimation to stop after fewer iterations than
   is recommended (``n_iter``). For stable models, we recommend to use the
   default setting (``n_iter=10``).

.. GENERATED FROM PYTHON SOURCE LINES 231-244

.. code-block:: Python


    # To speed up the example, we cache the NCRF:
    ncrf_file = data_path / 'MEG' / 'bst_auditory' / 'oddball_ncrf.pickle'
    if ncrf_file.exists():
        model = eelbrain.load.unpickle(ncrf_file)
    else:
        model = fit_ncrf(
            meg, [stim1, stim2], lf, noise_cov, tstart=0, tstop=0.5,
            mu=0.0001756774187547859, n_iter=5,
        )
        eelbrain.save.pickle(model, ncrf_file)









.. GENERATED FROM PYTHON SOURCE LINES 245-249

The learned kernel/filter (the NCRF) can be accessed as an attribute of the
``model``.
NCRFs are stored as :class:`eelbrain.NDVar`. Here, the two NCRFs correspond
to the two different predictor variables:

.. GENERATED FROM PYTHON SOURCE LINES 249-253

.. code-block:: Python


    model.h






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<NDVar: 5107 source, 51 time>, <NDVar: 5107 source, 51 time>]



.. GENERATED FROM PYTHON SOURCE LINES 254-262

Visualization
-------------
A butterfly plot shows weights in all sources over time.
This is good for forming a quick impression of important time lags,
or peaks in the response:

.. note::
   Since the estimates are sparse over cortical locations, smoothing the NCRFs over sources to make the visualization more intuitive.

.. GENERATED FROM PYTHON SOURCE LINES 262-266

.. code-block:: Python


    h = [h.smooth('source', 0.01, 'gaussian') for h in model.h]
    p = eelbrain.plot.Butterfly(h)




.. image-sg:: /auto_examples/images/sphx_glr_example_003.png
   :alt: example
   :srcset: /auto_examples/images/sphx_glr_example_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 267-275

The following code for plotting the anatomical localization
is commented because the `Mayavi <https://docs.enthought.com/mayavi/mayavi>`_
based plots do not
work reliably in the automatic documentation.
Uncomment it to create anatomical plots.

A single time point can be visualized with the PySurfer (:mod:`surfer`)
based :func:`eelbrain.plot.brain.brain`:

.. GENERATED FROM PYTHON SOURCE LINES 275-278

.. code-block:: Python


    # brain = eelbrain.plot.brain.brain(h[0].sub(time=0.140), vmax=2e-11, surf='pial')








.. GENERATED FROM PYTHON SOURCE LINES 279-281

An :class:`eelbrain.plot.brain.SequencePlotter` can be used to plot a
sequence of brain images, for example in a jupyter notebook:

.. GENERATED FROM PYTHON SOURCE LINES 281-288

.. code-block:: Python


    # h_binned = h0.bin(0.1, 0.1, 0.4, 'extrema')
    # sp = eelbrain.plot.brain.SequencePlotter()
    # sp.set_brain_args(surf='inflated')
    # sp.add_ndvar(h_binned)
    # p = sp.plot_table(view='lateral')








.. GENERATED FROM PYTHON SOURCE LINES 289-291

In an interactive iPython session, we can also use interactive time-linked
plots with :func:`eelbrain.plot.brain.butterfly`:

.. GENERATED FROM PYTHON SOURCE LINES 291-293

.. code-block:: Python


    # brain, butterfly = eelbrain.plot.brain.butterfly(h0)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (11 minutes 22.971 seconds)


.. _sphx_glr_download_auto_examples_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example.ipynb <example.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example.py <example.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example.zip <example.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
